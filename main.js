!function(){"use strict";class e{constructor(e,t,s,r,i){this.data=e,this._selector=t,this._handleImageClick=s,this._handleDeleteCard=r,this._handleLikeCard=i,this._cardId=e._id,this.isLiked=e.isLiked}_setEventListeners(){this._setLikeHandler(),this._setDeleteHandler(),this._setImageClickHandler()}getCard(){this._cardEl=document.querySelector(this._selector).content.firstElementChild.cloneNode(!0);const e=this._cardEl.querySelector(".card__image"),t=this._cardEl.querySelector(".card__title");return e.src=this.data.link,e.alt=this.data.name,this._likeBtn=this._cardEl.querySelector(".card__like-button"),this.isLiked&&this._likeBtn.classList.add("card__like-button-active"),t.textContent=this.data.name,this._setEventListeners(),this._cardEl}_setLikeHandler(){this._likeBtn.addEventListener("click",(()=>{this._handleLikeCard(this)}))}_setDeleteHandler(){this._cardEl.querySelector(".card__delete-image").addEventListener("click",(()=>{this._handleDeleteCard(this._cardEl,this._cardId)}))}remove=()=>{this._cardEl.remove(),this._cardEl=null};_setImageClickHandler(){this._cardEl.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick(this.data)}))}toggleLike(){this.isLiked?(this.isLiked=!1,this._likeBtn.classList.remove("card__like-button-active")):(this.isLiked=!0,this._likeBtn.classList.add("card__like-button-active")),console.log("TOGGLE LIKE CLICKED")}}class t{constructor(e,t){this._config=e,this._form=t}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._disabledButton()})),this._setEventListeners()}_setEventListeners(){this._inputElements=Array.from(this._form.querySelectorAll(this._config.inputSelector)),this._submitButton=this._form.querySelector(this._config.submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_checkValidity(){return this._inputElements.every((e=>e.validity.valid))}_disabledButton(){this._submitButton.classList.add(this._config.inactiveButtonClass),this._submitButton.disabled=!0}_enabledButton(){this._submitButton.classList.remove(this._config.inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._checkValidity()?this._enabledButton():this._disabledButton()}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._config.inputErrorClass),t.textContent=e.validationMessage,e.classList.add(this._config.errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.textContent="",e.classList.remove(this._config.errorClass)}}class s{constructor(e){this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close-button")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleCloseEscPressDown),this._popupElement.addEventListener("mousedown",this._handleCloseMouseClick)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleCloseEscPressDown),this._popupElement.removeEventListener("mousedown",this._handleCloseMouseClick)}_handleCloseEscPressDown=e=>{"Escape"===e.key&&this.close()};_handleCloseMouseClick=e=>{e.target===e.currentTarget&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",this._handleCloseMouseClick)}}class r extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._formEl=this._popupElement.querySelector(".modal__form"),this._submitBtn=this._popupElement.querySelector(".modal__button"),this._submitBtnText=this._submitBtn.textContent}_getInputValues(){const e={};return this._formEl.querySelectorAll(".modal__field").forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._formEl.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._formEl.reset()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";console.log("boolean isLoading: ",e),console.log("button Text before assignment: ",this._submitBtn.textContent),this._submitBtn.textContent=e?t:this._submitBtnText,console.log("button Text after assignment: ",this._submitBtn.textContent)}}class i{constructor(e,t){let{items:s,renderer:r}=e;this._renderer=r,this._renderItems=s,this._container=document.querySelector(t)}renderItems(){this._renderItems.forEach((e=>{this._renderer(e)}))}addItems(e){this._container.prepend(e)}}const o=document.querySelector("#js-profile-edit-button"),n=document.querySelector("#js-profile-edit-modal"),l=n.querySelector("#js-profile-close-modal"),a=document.querySelector("#js-profile-title"),d=document.querySelector("#js-profile-description"),c=document.querySelector("#js-profile-title-input"),u=document.querySelector("#js-profile-description-input"),h=n.querySelector("#js-modal-edit-form"),m=document.querySelector("#js-card-template").content.firstElementChild,p=document.querySelector("#js-card__list"),_=document.querySelector("#js-add-card-modal"),f=_.querySelector("#js-modal-add-card-form"),E=f.querySelector("#js-add-card-title-input"),g=f.querySelector("#js-add-card-description-input"),v=document.querySelector("#js-profile-add-button"),L=_.querySelector("#js-add-card-close-modal");var b={profileEditButton:o,profileEditModal:n,profileCloseModal:l,profileTitle:a,profileDescription:d,profileTitleInput:c,profileDescriptionInput:u,profileEditForm:h,cardTemplate:m,cardListElement:p,addCardModal:_,addCardForm:f,newCardTitleInput:E,newCardUrlInput:g,profileAddCardButton:v,addCardmodalCloseButton:L,imagePreviewModal:document.querySelector("#js-image-preview-modal"),imageClosePreviewModal:document.querySelector("#js-image-preview-close-modal"),config:{formSelector:".modal__form",inputSelector:".modal__field",submitButtonSelector:".modal__button",inactiveButtonClass:".modal__button_disabled",inputErrorClass:"modal__error",errorClass:"modal__error_visible"},initialCards:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],htmlIds:{cardList:"#js-card__list",cardTemplate:"#js-card-template",addCardPopup:"#js-add-card-modal",imagePreviewPopup:"#js-image-preview-modal",profileEditPopup:"#js-profile-edit-modal",profileTitle:"#js-profile-title",profileDescription:"#js-profile-description"}};!function(e){const s=document.querySelectorAll(b.config.formSelector);let r=Array.from(s);r=r.filter((e=>"js-delete-form"!==e.id)),r.forEach((s=>{new t(e,s).enableValidation()}))}(b.config);const C=new class{constructor(e){let{titleSelector:t,descriptionSelector:s,profilePictureSelector:r}=e;this._titleElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._profilePictureElement=document.querySelector(r)}getUserInfo(){return this._userInfo={name:this._titleElement.textContent,description:this._descriptionElement.textContent,avatar:this._profilePictureElement.src},console.log("Inside getUSerInfo: ",this._userInfo),this._userInfo}setUserInfo(e){let{name:t,description:s}=e;this._titleElement.textContent=t,this._descriptionElement.textContent=s}setProfilePicture(e){let{profilePicture:t}=e;this._profilePictureElement.src=t}}({titleSelector:b.htmlIds.profileTitle,descriptionSelector:b.htmlIds.profileDescription,profilePictureSelector:".profile__image"}),S=new class extends s{constructor(e){super(e),this._popupForm=this._popupElement.querySelector("#js-delete-form"),this._submitBtn=this._popupElement.querySelector(".modal__button"),this._submitBtnText=this._submitBtn.textContent}setSubmitAction(e){this._handleSubmitForm=e}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitForm()})),super.setEventListeners()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";this._submitBtn.textContent=e?t:this._submitBtnText}}("#js-card-delete-modal"),y=new r("#js-edit-profile-picture-modal",(function(e){y.renderLoading(!0),I.updateUserImage({avatar:e.url}).then((t=>{C.setProfilePicture({profilePicture:e.url}),y.close()})).catch((e=>{console.error("Picture Not Update",e)})).finally((()=>{y.renderLoading(!1,"Save")}))}));let k;const I=new class{constructor(e){this._baseUrl=e.baseUrl,this._header=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._header}).then(this._handleResponse)}createCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._header,body:JSON.stringify({name:t,link:s})}).then(this._handleResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._header}).then(this._handleResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._header}).then(this._handleResponse)}disLikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._header}).then(this._handleResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._header}).then(this._handleResponse)}updateUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._header,body:JSON.stringify({name:e,about:t})})}updateUserImage(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._header,body:JSON.stringify(e)}).then(this._handleResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"d50bb54b-1efc-4b8a-a5b1-3d5c72d6a1b0","Content-Type":"application/json"}});function w(e,t){S.open(),S.setSubmitAction((()=>{S.renderLoading(!0),I.deleteCard(t).then((()=>{S.close(),e.remove()})).catch((e=>{console.error(e)})).finally((()=>{S.renderLoading(!1,"Yes")}))}))}function j(e){e.isLiked?I.disLikeCard(e.data._id).then((t=>{e.toggleLike()})).catch((e=>{console.error(e)})):I.likeCard(e.data._id).then((t=>{console.log("Inside api.likeCard"),e.toggleLike()})).catch((e=>{console.error(e)}))}I.getInitialCards().then((e=>{k=new i({items:e,renderer:U},b.htmlIds.cardList),k.renderItems()})).catch((e=>{console.error(`Error getting cards: ${e} `)})),I.getUserInfo().then((e=>{C.setUserInfo({name:e.name,description:e.about}),C.setProfilePicture({profilePicture:e.avatar})})).catch((e=>{console.log("ERROR: ",e),console.error(e)})),S.setEventListeners(),y.setEventListeners(),document.querySelector("#js-edit-profile-overlay_img").addEventListener("click",(()=>{console.log("edit profile Picture Form: ",y),y.open()}));const q=new r(b.htmlIds.profileEditPopup,(function(e){q.renderLoading(!0),I.updateUserInfo(e.title,e.description).then((()=>{C.setUserInfo({name:e.title,description:e.description}),q.close()})).catch((e=>{console.error(`Error updating new information: ${e}`)})).finally((()=>{q.renderLoading(!1,"Save")}))}));q.setEventListeners(),b.profileEditButton.addEventListener("click",(()=>{const e=C.getUserInfo();b.profileTitleInput.value=e.name,b.profileDescriptionInput.value=e.description,q.open()}));const B=new r(b.htmlIds.addCardPopup,(function(e){B.renderLoading(!0),I.createCard({name:e.title,link:e.url}).then((e=>{U(e),B.close()})).catch((e=>{console.error(`Error adding new Card: ${e}`)})).finally((()=>{B.renderLoading(!1,"Save")}))}));B.setEventListeners(),b.profileAddCardButton.addEventListener("click",(()=>{B.open()}));const P=new class extends s{constructor(e){super(e),this._img=this._popupElement.querySelector("#js-card__image"),this._title=this._popupElement.querySelector("#js-image-preview-card-title")}open(e){this._img.src=e.link,this._img.alt=e.name,this._title.textContent=e.name,super.open()}}(b.htmlIds.imagePreviewPopup);function T(e){P.open(e)}function U(t){const s=new e(t,b.htmlIds.cardTemplate,T,w,j).getCard();k.addItems(s)}P.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,